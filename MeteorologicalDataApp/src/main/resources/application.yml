spring:
  # PostgreSQL
  datasource:
    url: jdbc:postgresql://localhost:5432/meteo_app
    username:
    password:
  jpa:
    hibernate:
      ddl-auto: create
    #ddl-auto: create-drop
    #show-sql: true
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  # Cassandra
  cassandra:
    keyspace-name: city_measurements
    username: jDcWwTGZdQHGfzjPjIHUzcCO
    password: x8QHdUDorQGWEA-TddXlaT_5iaNoUj2mFGNEkyst3yDwNh-50_XhBZD7PHUzhPrewIfMqTmEvwGEeGDS6D5sKD_pk347khQfpItzx3ZpEedD8bFHLvMgI1bMsiqi-hND
    contact-points: 125d2991-52ca-4673-a792-eb7555afb002-europe-west1.db.astra.datastax.com:29042
    schema-action: create_if_not_exists
    #schema-action: recreate
    request:
      timeout: 10s
    connection:
      connect-timeout: 10s
      init-query-timeout: 10s

  web:
    resources:
      static-locations: classpath:/static/

# DataStax Astra Cassandra Database
datastax.astra:
  secure-connect-bundle: secure-connect-meteorologicaldataapp.zip

astra:
  api:
    database-id: 125d2991-52ca-4673-a792-eb7555afb002
    database-region: europe-west1
    application-token: AstraCS:jDcWwTGZdQHGfzjPjIHUzcCO:55de90ee239ea3422090969449dd5082fc19f5978c48a93756f4da3a096aeaf9


weather:
  source:
    url: https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}&units=metric&lang=cz
    url-geocoding: http://api.openweathermap.org/geo/1.0/direct?q={city name}&limit=1&appid={API key}
    api-key: 3c0d26cf6bca6d964c433c9a8dce85bd
    update-rate: 15
    max-calls: 50
  data:
    #expiration 14 days - in seconds:
    expiration: 1209600

app:
  read-only-mode: false


